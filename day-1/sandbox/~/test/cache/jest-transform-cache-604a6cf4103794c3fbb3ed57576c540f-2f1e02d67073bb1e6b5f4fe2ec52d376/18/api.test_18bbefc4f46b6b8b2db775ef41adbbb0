58bb077f5f31d820054a811231a510a0
test('should return status code 200 with error 1', () => {
  expect(1).toEqual(1);
});
test('should return status code 200 with error 2', () => {
  expect(1).toEqual(1);
});
test('should return status code 200 with error 3', () => {
  expect(1).toEqual(1);
}); //
// const request = require('supertest');
// const nock = require('nock');
//
// const app = require('../../server');
//
// beforeEach(() => {
//   nock.cleanAll();
// });
//
// test('should return status code 200 with error', async () => {
//   expect.assertions(1);
//
//   nock('http://uinames.com/api')
//     .get('/')
//     .reply(500);
//
//   const { body } = await request(app)
//     .get('/proxy')
//     .set('Accept', 'application/json');
//
//   expect(body).toHaveProperty('error');
// });
//
// // test('should return status code 200', async () => {
// //   expect.assertions(4);
// //
// //   const { body } = await request(app)
// //     .get('/proxy')
// //     .set('Accept', 'application/json');
// //
// //   expect(body).toHaveProperty('name');
// //   expect(body).toHaveProperty('surname');
// //   expect(body).toHaveProperty('region');
// //   expect(body).toHaveProperty('gender');
// // });
//
// test('should return status expected response', async () => {
//   expect.assertions(4);
//
//   nock('http://uinames.com/api')
//   .get('/')
//   .reply(200, {
//     name: 'test-name',
//     surname: 'test-surname',
//     region: 'test-region',
//     gender: 'test-gender'
//   });
//
//   const { body } = await request(app)
//     .get('/proxy')
//     .set('Accept', 'application/json');
//
//   expect(body).toHaveProperty('name', 'test-name');
//   expect(body).toHaveProperty('surname', 'test-surname');
//   expect(body).toHaveProperty('region', 'test-region');
//   expect(body).toHaveProperty('gender', 'test-gender');
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS50ZXN0LmpzIl0sIm5hbWVzIjpbInRlc3QiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiQUFFQUEsSUFBSSxDQUFDLDRDQUFELEVBQStDLE1BQU07QUFDdkRDLEVBQUFBLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVUMsT0FBVixDQUFrQixDQUFsQjtBQUNELENBRkcsQ0FBSjtBQUlBRixJQUFJLENBQUMsNENBQUQsRUFBK0MsTUFBTTtBQUN2REMsRUFBQUEsTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVQyxPQUFWLENBQWtCLENBQWxCO0FBQ0QsQ0FGRyxDQUFKO0FBSUFGLElBQUksQ0FBQyw0Q0FBRCxFQUErQyxNQUFNO0FBQ3ZEQyxFQUFBQSxNQUFNLENBQUMsQ0FBRCxDQUFOLENBQVVDLE9BQVYsQ0FBa0IsQ0FBbEI7QUFDRCxDQUZHLENBQUosQyxDQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbnRlc3QoJ3Nob3VsZCByZXR1cm4gc3RhdHVzIGNvZGUgMjAwIHdpdGggZXJyb3IgMScsICgpID0+IHtcbiAgZXhwZWN0KDEpLnRvRXF1YWwoMSk7XG59KTtcblxudGVzdCgnc2hvdWxkIHJldHVybiBzdGF0dXMgY29kZSAyMDAgd2l0aCBlcnJvciAyJywgKCkgPT4ge1xuICBleHBlY3QoMSkudG9FcXVhbCgxKTtcbn0pO1xuXG50ZXN0KCdzaG91bGQgcmV0dXJuIHN0YXR1cyBjb2RlIDIwMCB3aXRoIGVycm9yIDMnLCAoKSA9PiB7XG4gIGV4cGVjdCgxKS50b0VxdWFsKDEpO1xufSk7XG5cblxuXG4vL1xuLy8gY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpO1xuLy8gY29uc3Qgbm9jayA9IHJlcXVpcmUoJ25vY2snKTtcbi8vXG4vLyBjb25zdCBhcHAgPSByZXF1aXJlKCcuLi8uLi9zZXJ2ZXInKTtcbi8vXG4vLyBiZWZvcmVFYWNoKCgpID0+IHtcbi8vICAgbm9jay5jbGVhbkFsbCgpO1xuLy8gfSk7XG4vL1xuLy8gdGVzdCgnc2hvdWxkIHJldHVybiBzdGF0dXMgY29kZSAyMDAgd2l0aCBlcnJvcicsIGFzeW5jICgpID0+IHtcbi8vICAgZXhwZWN0LmFzc2VydGlvbnMoMSk7XG4vL1xuLy8gICBub2NrKCdodHRwOi8vdWluYW1lcy5jb20vYXBpJylcbi8vICAgICAuZ2V0KCcvJylcbi8vICAgICAucmVwbHkoNTAwKTtcbi8vXG4vLyAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgcmVxdWVzdChhcHApXG4vLyAgICAgLmdldCgnL3Byb3h5Jylcbi8vICAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuLy9cbi8vICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcicpO1xuLy8gfSk7XG4vL1xuLy8gLy8gdGVzdCgnc2hvdWxkIHJldHVybiBzdGF0dXMgY29kZSAyMDAnLCBhc3luYyAoKSA9PiB7XG4vLyAvLyAgIGV4cGVjdC5hc3NlcnRpb25zKDQpO1xuLy8gLy9cbi8vIC8vICAgY29uc3QgeyBib2R5IH0gPSBhd2FpdCByZXF1ZXN0KGFwcClcbi8vIC8vICAgICAuZ2V0KCcvcHJveHknKVxuLy8gLy8gICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4vLyAvL1xuLy8gLy8gICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ25hbWUnKTtcbi8vIC8vICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdzdXJuYW1lJyk7XG4vLyAvLyAgIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgncmVnaW9uJyk7XG4vLyAvLyAgIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnZ2VuZGVyJyk7XG4vLyAvLyB9KTtcbi8vXG4vLyB0ZXN0KCdzaG91bGQgcmV0dXJuIHN0YXR1cyBleHBlY3RlZCByZXNwb25zZScsIGFzeW5jICgpID0+IHtcbi8vICAgZXhwZWN0LmFzc2VydGlvbnMoNCk7XG4vL1xuLy8gICBub2NrKCdodHRwOi8vdWluYW1lcy5jb20vYXBpJylcbi8vICAgLmdldCgnLycpXG4vLyAgIC5yZXBseSgyMDAsIHtcbi8vICAgICBuYW1lOiAndGVzdC1uYW1lJyxcbi8vICAgICBzdXJuYW1lOiAndGVzdC1zdXJuYW1lJyxcbi8vICAgICByZWdpb246ICd0ZXN0LXJlZ2lvbicsXG4vLyAgICAgZ2VuZGVyOiAndGVzdC1nZW5kZXInXG4vLyAgIH0pO1xuLy9cbi8vICAgY29uc3QgeyBib2R5IH0gPSBhd2FpdCByZXF1ZXN0KGFwcClcbi8vICAgICAuZ2V0KCcvcHJveHknKVxuLy8gICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4vL1xuLy8gICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ25hbWUnLCAndGVzdC1uYW1lJyk7XG4vLyAgIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnc3VybmFtZScsICd0ZXN0LXN1cm5hbWUnKTtcbi8vICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdyZWdpb24nLCAndGVzdC1yZWdpb24nKTtcbi8vICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdnZW5kZXInLCAndGVzdC1nZW5kZXInKTtcbi8vIH0pO1xuIl19