111ae6bbe7870ae854c1cec8561c50fd
/* istanbul ignore next */
var cov_20gc3txov9 = function () {
  var path = "/Users/andriic/Projects/wix-kickstart-node/day-1/sandbox/server.js";
  var hash = "29bde6212309a49c47296d78671259172bb9e936";

  var Function = function () {}.constructor;

  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/andriic/Projects/wix-kickstart-node/day-1/sandbox/server.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 2,
          column: 34
        }
      },
      "1": {
        start: {
          line: 3,
          column: 14
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 5,
          column: 12
        },
        end: {
          line: 5,
          column: 21
        }
      },
      "3": {
        start: {
          line: 6,
          column: 13
        },
        end: {
          line: 6,
          column: 17
        }
      },
      "4": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 15,
          column: 3
        }
      },
      "5": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "6": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 63
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 19
        }
      },
      "8": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 37
        }
      },
      "9": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 19
          }
        },
        loc: {
          start: {
            line: 8,
            column: 38
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 8
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const express =
/* istanbul ignore next */
(cov_20gc3txov9.s[0]++, require('express'));
const axios =
/* istanbul ignore next */
(cov_20gc3txov9.s[1]++, require('axios'));
const app =
/* istanbul ignore next */
(cov_20gc3txov9.s[2]++, express());
const port =
/* istanbul ignore next */
(cov_20gc3txov9.s[3]++, 3000);

/* istanbul ignore next */
cov_20gc3txov9.s[4]++;
app.get('/proxy', async (req, res) => {
  /* istanbul ignore next */
  cov_20gc3txov9.f[0]++;
  cov_20gc3txov9.s[5]++;

  try {
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_20gc3txov9.s[6]++, await axios.get('http://uinames.com/api/'));

    /* istanbul ignore next */
    cov_20gc3txov9.s[7]++;
    res.json(data);
  } catch (err) {
    /* istanbul ignore next */
    cov_20gc3txov9.s[8]++;
    res.json({
      error: err.message
    });
  }
}); // app.listen(port, () => {
//   console.log(`Example app listening on port ${port}!`);
// });

/* istanbul ignore next */
cov_20gc3txov9.s[9]++;
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImF4aW9zIiwiYXBwIiwicG9ydCIsImdldCIsInJlcSIsInJlcyIsImRhdGEiLCJqc29uIiwiZXJyIiwiZXJyb3IiLCJtZXNzYWdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsTUFBTUEsT0FBTztBQUFBO0FBQUEsd0JBQUdDLE9BQU8sQ0FBQyxTQUFELENBQVYsQ0FBYjtBQUNBLE1BQU1DLEtBQUs7QUFBQTtBQUFBLHdCQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFWLENBQVg7QUFFQSxNQUFNRSxHQUFHO0FBQUE7QUFBQSx3QkFBR0gsT0FBTyxFQUFWLENBQVQ7QUFDQSxNQUFNSSxJQUFJO0FBQUE7QUFBQSx3QkFBRyxJQUFILENBQVY7Ozs7QUFFQUQsR0FBRyxDQUFDRSxHQUFKLENBQVEsUUFBUixFQUFrQixPQUFPQyxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFBQTtBQUFBO0FBQUE7O0FBQ3BDLE1BQUk7QUFDRixVQUFNO0FBQUVDLE1BQUFBO0FBQUY7QUFBQTtBQUFBLDRCQUFXLE1BQU1OLEtBQUssQ0FBQ0csR0FBTixDQUFVLHlCQUFWLENBQWpCLENBQU47O0FBREU7QUFBQTtBQUVGRSxJQUFBQSxHQUFHLENBQUNFLElBQUosQ0FBU0QsSUFBVDtBQUNELEdBSEQsQ0FHRSxPQUFPRSxHQUFQLEVBQVk7QUFBQTtBQUFBO0FBQ1pILElBQUFBLEdBQUcsQ0FBQ0UsSUFBSixDQUFTO0FBQUVFLE1BQUFBLEtBQUssRUFBRUQsR0FBRyxDQUFDRTtBQUFiLEtBQVQ7QUFDRDtBQUNGLENBUEQsRSxDQVNBO0FBQ0E7QUFDQTs7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJYLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBwb3J0ID0gMzAwMDtcblxuYXBwLmdldCgnL3Byb3h5JywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQoJ2h0dHA6Ly91aW5hbWVzLmNvbS9hcGkvJyk7XG4gICAgcmVzLmpzb24oZGF0YSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJlcy5qc29uKHsgZXJyb3I6IGVyci5tZXNzYWdlIH0pO1xuICB9XG59KTtcblxuLy8gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4vLyAgIGNvbnNvbGUubG9nKGBFeGFtcGxlIGFwcCBsaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9IWApO1xuLy8gfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwO1xuIl19