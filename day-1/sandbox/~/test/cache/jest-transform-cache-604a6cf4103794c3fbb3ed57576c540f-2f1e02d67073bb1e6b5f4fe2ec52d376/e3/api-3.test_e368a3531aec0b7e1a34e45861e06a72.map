{"version":3,"sources":["api-3.test.js"],"names":["request","require","nock","app","beforeEach","cleanAll","test","expect","assertions","get","reply","body","set","toHaveProperty","name","surname","region","gender"],"mappings":"AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AAEAG,UAAU,CAAC,MAAM;AACfF,EAAAA,IAAI,CAACG,QAAL;AACD,CAFS,CAAV;AAIAC,IAAI,CAAC,0CAAD,EAA6C,YAAY;AAC3DC,EAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AAEAN,EAAAA,IAAI,CAAC,wBAAD,CAAJ,CACGO,GADH,CACO,GADP,EAEGC,KAFH,CAES,GAFT;AAIA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMX,OAAO,CAACG,GAAD,CAAP,CACpBM,GADoB,CAChB,QADgB,EAEpBG,GAFoB,CAEhB,QAFgB,EAEN,kBAFM,CAAvB;AAIAL,EAAAA,MAAM,CAACI,IAAD,CAAN,CAAaE,cAAb,CAA4B,OAA5B;AACD,CAZG,CAAJ,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAP,IAAI,CAAC,wCAAD,EAA2C,YAAY;AACzDC,EAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AAEAN,EAAAA,IAAI,CAAC,wBAAD,CAAJ,CACCO,GADD,CACK,GADL,EAECC,KAFD,CAEO,GAFP,EAEY;AACVI,IAAAA,IAAI,EAAE,WADI;AAEVC,IAAAA,OAAO,EAAE,cAFC;AAGVC,IAAAA,MAAM,EAAE,aAHE;AAIVC,IAAAA,MAAM,EAAE;AAJE,GAFZ;AASA,QAAM;AAAEN,IAAAA;AAAF,MAAW,MAAMX,OAAO,CAACG,GAAD,CAAP,CACpBM,GADoB,CAChB,QADgB,EAEpBG,GAFoB,CAEhB,QAFgB,EAEN,kBAFM,CAAvB;AAIAL,EAAAA,MAAM,CAACI,IAAD,CAAN,CAAaE,cAAb,CAA4B,MAA5B,EAAoC,WAApC;AACAN,EAAAA,MAAM,CAACI,IAAD,CAAN,CAAaE,cAAb,CAA4B,SAA5B,EAAuC,cAAvC;AACAN,EAAAA,MAAM,CAACI,IAAD,CAAN,CAAaE,cAAb,CAA4B,QAA5B,EAAsC,aAAtC;AACAN,EAAAA,MAAM,CAACI,IAAD,CAAN,CAAaE,cAAb,CAA4B,QAA5B,EAAsC,aAAtC;AACD,CApBG,CAAJ","sourcesContent":["\nconst request = require('supertest');\nconst nock = require('nock');\n\nconst app = require('../../server');\n\nbeforeEach(() => {\n  nock.cleanAll();\n});\n\ntest('should return status code 200 with error', async () => {\n  expect.assertions(1);\n\n  nock('http://uinames.com/api')\n    .get('/')\n    .reply(500);\n\n  const { body } = await request(app)\n    .get('/proxy')\n    .set('Accept', 'application/json');\n\n  expect(body).toHaveProperty('error');\n});\n\n// test('should return status code 200', async () => {\n//   expect.assertions(4);\n//\n//   const { body } = await request(app)\n//     .get('/proxy')\n//     .set('Accept', 'application/json');\n//\n//   expect(body).toHaveProperty('name');\n//   expect(body).toHaveProperty('surname');\n//   expect(body).toHaveProperty('region');\n//   expect(body).toHaveProperty('gender');\n// });\n\ntest('should return status expected response', async () => {\n  expect.assertions(4);\n\n  nock('http://uinames.com/api')\n  .get('/')\n  .reply(200, {\n    name: 'test-name',\n    surname: 'test-surname',\n    region: 'test-region',\n    gender: 'test-gender'\n  });\n\n  const { body } = await request(app)\n    .get('/proxy')\n    .set('Accept', 'application/json');\n\n  expect(body).toHaveProperty('name', 'test-name');\n  expect(body).toHaveProperty('surname', 'test-surname');\n  expect(body).toHaveProperty('region', 'test-region');\n  expect(body).toHaveProperty('gender', 'test-gender');\n});\n"]}