2109433d10846fd3e6a57be15200d342
const request = require('supertest');

const nock = require('nock');

const app = require('../../server');

beforeEach(() => {
  nock.cleanAll();
});
test('should return status code 200 with error', async () => {
  expect.assertions(1);
  nock('http://uinames.com/api').get('/').reply(500);
  const {
    body
  } = await request(app).get('/proxy').set('Accept', 'application/json');
  expect(body).toHaveProperty('error');
}); // test('should return status code 200', async () => {
//   expect.assertions(4);
//
//   const { body } = await request(app)
//     .get('/proxy')
//     .set('Accept', 'application/json');
//
//   expect(body).toHaveProperty('name');
//   expect(body).toHaveProperty('surname');
//   expect(body).toHaveProperty('region');
//   expect(body).toHaveProperty('gender');
// });

test('should return status expected response', async () => {
  expect.assertions(4);
  nock('http://uinames.com/api').get('/').reply(200, {
    name: 'test-name',
    surname: 'test-surname',
    region: 'test-region',
    gender: 'test-gender'
  });
  const {
    body
  } = await request(app).get('/proxy').set('Accept', 'application/json');
  expect(body).toHaveProperty('name', 'test-name');
  expect(body).toHaveProperty('surname', 'test-surname');
  expect(body).toHaveProperty('region', 'test-region');
  expect(body).toHaveProperty('gender', 'test-gender');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS0yLnRlc3QuanMiXSwibmFtZXMiOlsicmVxdWVzdCIsInJlcXVpcmUiLCJub2NrIiwiYXBwIiwiYmVmb3JlRWFjaCIsImNsZWFuQWxsIiwidGVzdCIsImV4cGVjdCIsImFzc2VydGlvbnMiLCJnZXQiLCJyZXBseSIsImJvZHkiLCJzZXQiLCJ0b0hhdmVQcm9wZXJ0eSIsIm5hbWUiLCJzdXJuYW1lIiwicmVnaW9uIiwiZ2VuZGVyIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsY0FBRCxDQUFuQjs7QUFFQUcsVUFBVSxDQUFDLE1BQU07QUFDZkYsRUFBQUEsSUFBSSxDQUFDRyxRQUFMO0FBQ0QsQ0FGUyxDQUFWO0FBSUFDLElBQUksQ0FBQywwQ0FBRCxFQUE2QyxZQUFZO0FBQzNEQyxFQUFBQSxNQUFNLENBQUNDLFVBQVAsQ0FBa0IsQ0FBbEI7QUFFQU4sRUFBQUEsSUFBSSxDQUFDLHdCQUFELENBQUosQ0FDR08sR0FESCxDQUNPLEdBRFAsRUFFR0MsS0FGSCxDQUVTLEdBRlQ7QUFJQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBVyxNQUFNWCxPQUFPLENBQUNHLEdBQUQsQ0FBUCxDQUNwQk0sR0FEb0IsQ0FDaEIsUUFEZ0IsRUFFcEJHLEdBRm9CLENBRWhCLFFBRmdCLEVBRU4sa0JBRk0sQ0FBdkI7QUFJQUwsRUFBQUEsTUFBTSxDQUFDSSxJQUFELENBQU4sQ0FBYUUsY0FBYixDQUE0QixPQUE1QjtBQUNELENBWkcsQ0FBSixDLENBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBUCxJQUFJLENBQUMsd0NBQUQsRUFBMkMsWUFBWTtBQUN6REMsRUFBQUEsTUFBTSxDQUFDQyxVQUFQLENBQWtCLENBQWxCO0FBRUFOLEVBQUFBLElBQUksQ0FBQyx3QkFBRCxDQUFKLENBQ0NPLEdBREQsQ0FDSyxHQURMLEVBRUNDLEtBRkQsQ0FFTyxHQUZQLEVBRVk7QUFDVkksSUFBQUEsSUFBSSxFQUFFLFdBREk7QUFFVkMsSUFBQUEsT0FBTyxFQUFFLGNBRkM7QUFHVkMsSUFBQUEsTUFBTSxFQUFFLGFBSEU7QUFJVkMsSUFBQUEsTUFBTSxFQUFFO0FBSkUsR0FGWjtBQVNBLFFBQU07QUFBRU4sSUFBQUE7QUFBRixNQUFXLE1BQU1YLE9BQU8sQ0FBQ0csR0FBRCxDQUFQLENBQ3BCTSxHQURvQixDQUNoQixRQURnQixFQUVwQkcsR0FGb0IsQ0FFaEIsUUFGZ0IsRUFFTixrQkFGTSxDQUF2QjtBQUlBTCxFQUFBQSxNQUFNLENBQUNJLElBQUQsQ0FBTixDQUFhRSxjQUFiLENBQTRCLE1BQTVCLEVBQW9DLFdBQXBDO0FBQ0FOLEVBQUFBLE1BQU0sQ0FBQ0ksSUFBRCxDQUFOLENBQWFFLGNBQWIsQ0FBNEIsU0FBNUIsRUFBdUMsY0FBdkM7QUFDQU4sRUFBQUEsTUFBTSxDQUFDSSxJQUFELENBQU4sQ0FBYUUsY0FBYixDQUE0QixRQUE1QixFQUFzQyxhQUF0QztBQUNBTixFQUFBQSxNQUFNLENBQUNJLElBQUQsQ0FBTixDQUFhRSxjQUFiLENBQTRCLFFBQTVCLEVBQXNDLGFBQXRDO0FBQ0QsQ0FwQkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpO1xuY29uc3Qgbm9jayA9IHJlcXVpcmUoJ25vY2snKTtcblxuY29uc3QgYXBwID0gcmVxdWlyZSgnLi4vLi4vc2VydmVyJyk7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBub2NrLmNsZWFuQWxsKCk7XG59KTtcblxudGVzdCgnc2hvdWxkIHJldHVybiBzdGF0dXMgY29kZSAyMDAgd2l0aCBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgZXhwZWN0LmFzc2VydGlvbnMoMSk7XG5cbiAgbm9jaygnaHR0cDovL3VpbmFtZXMuY29tL2FwaScpXG4gICAgLmdldCgnLycpXG4gICAgLnJlcGx5KDUwMCk7XG5cbiAgY29uc3QgeyBib2R5IH0gPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAuZ2V0KCcvcHJveHknKVxuICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcicpO1xufSk7XG5cbi8vIHRlc3QoJ3Nob3VsZCByZXR1cm4gc3RhdHVzIGNvZGUgMjAwJywgYXN5bmMgKCkgPT4ge1xuLy8gICBleHBlY3QuYXNzZXJ0aW9ucyg0KTtcbi8vXG4vLyAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgcmVxdWVzdChhcHApXG4vLyAgICAgLmdldCgnL3Byb3h5Jylcbi8vICAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuLy9cbi8vICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCduYW1lJyk7XG4vLyAgIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnc3VybmFtZScpO1xuLy8gICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ3JlZ2lvbicpO1xuLy8gICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ2dlbmRlcicpO1xuLy8gfSk7XG5cbnRlc3QoJ3Nob3VsZCByZXR1cm4gc3RhdHVzIGV4cGVjdGVkIHJlc3BvbnNlJywgYXN5bmMgKCkgPT4ge1xuICBleHBlY3QuYXNzZXJ0aW9ucyg0KTtcblxuICBub2NrKCdodHRwOi8vdWluYW1lcy5jb20vYXBpJylcbiAgLmdldCgnLycpXG4gIC5yZXBseSgyMDAsIHtcbiAgICBuYW1lOiAndGVzdC1uYW1lJyxcbiAgICBzdXJuYW1lOiAndGVzdC1zdXJuYW1lJyxcbiAgICByZWdpb246ICd0ZXN0LXJlZ2lvbicsXG4gICAgZ2VuZGVyOiAndGVzdC1nZW5kZXInXG4gIH0pO1xuXG4gIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgLmdldCgnL3Byb3h5JylcbiAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnbmFtZScsICd0ZXN0LW5hbWUnKTtcbiAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdzdXJuYW1lJywgJ3Rlc3Qtc3VybmFtZScpO1xuICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ3JlZ2lvbicsICd0ZXN0LXJlZ2lvbicpO1xuICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ2dlbmRlcicsICd0ZXN0LWdlbmRlcicpO1xufSk7XG4iXX0=