683929aca7e711a64c1b5853b459148e
const request = require('supertest');

const nock = require('nock');

const app = require('../../server');

beforeEach(() => {
  nock.cleanAll();
});
test('should return status code 200 with error', async () => {
  expect.assertions(1);
  nock('http://uinames.com/api').get('/').reply(500);
  const {
    body
  } = await request(app).get('/proxy').set('Accept', 'application/json');
  expect(body).toHaveProperty('error');
}); // test('should return status code 200', async () => {
//   expect.assertions(4);
//
//   const { body } = await request(app)
//     .get('/proxy')
//     .set('Accept', 'application/json');
//
//   expect(body).toHaveProperty('name');
//   expect(body).toHaveProperty('surname');
//   expect(body).toHaveProperty('region');
//   expect(body).toHaveProperty('gender');
// });

test('should return status expected response', async () => {
  expect.assertions(4);
  nock('http://uinames.com/api').get('/').reply(200, {
    name: 'test-name',
    surname: 'test-surname',
    region: 'test-region',
    gender: 'test-gender'
  });
  const {
    body
  } = await request(app).get('/proxy').set('Accept', 'application/json');
  expect(body).toHaveProperty('name', 'test-name');
  expect(body).toHaveProperty('surname', 'test-surname');
  expect(body).toHaveProperty('region', 'test-region');
  expect(body).toHaveProperty('gender', 'test-gender');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS50ZXN0LmpzIl0sIm5hbWVzIjpbInJlcXVlc3QiLCJyZXF1aXJlIiwibm9jayIsImFwcCIsImJlZm9yZUVhY2giLCJjbGVhbkFsbCIsInRlc3QiLCJleHBlY3QiLCJhc3NlcnRpb25zIiwiZ2V0IiwicmVwbHkiLCJib2R5Iiwic2V0IiwidG9IYXZlUHJvcGVydHkiLCJuYW1lIiwic3VybmFtZSIsInJlZ2lvbiIsImdlbmRlciJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLGNBQUQsQ0FBbkI7O0FBRUFHLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZGLEVBQUFBLElBQUksQ0FBQ0csUUFBTDtBQUNELENBRlMsQ0FBVjtBQUlBQyxJQUFJLENBQUMsMENBQUQsRUFBNkMsWUFBWTtBQUMzREMsRUFBQUEsTUFBTSxDQUFDQyxVQUFQLENBQWtCLENBQWxCO0FBRUFOLEVBQUFBLElBQUksQ0FBQyx3QkFBRCxDQUFKLENBQ0dPLEdBREgsQ0FDTyxHQURQLEVBRUdDLEtBRkgsQ0FFUyxHQUZUO0FBSUEsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQVcsTUFBTVgsT0FBTyxDQUFDRyxHQUFELENBQVAsQ0FDcEJNLEdBRG9CLENBQ2hCLFFBRGdCLEVBRXBCRyxHQUZvQixDQUVoQixRQUZnQixFQUVOLGtCQUZNLENBQXZCO0FBSUFMLEVBQUFBLE1BQU0sQ0FBQ0ksSUFBRCxDQUFOLENBQWFFLGNBQWIsQ0FBNEIsT0FBNUI7QUFDRCxDQVpHLENBQUosQyxDQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVAsSUFBSSxDQUFDLHdDQUFELEVBQTJDLFlBQVk7QUFDekRDLEVBQUFBLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQixDQUFsQjtBQUVBTixFQUFBQSxJQUFJLENBQUMsd0JBQUQsQ0FBSixDQUNDTyxHQURELENBQ0ssR0FETCxFQUVDQyxLQUZELENBRU8sR0FGUCxFQUVZO0FBQ1ZJLElBQUFBLElBQUksRUFBRSxXQURJO0FBRVZDLElBQUFBLE9BQU8sRUFBRSxjQUZDO0FBR1ZDLElBQUFBLE1BQU0sRUFBRSxhQUhFO0FBSVZDLElBQUFBLE1BQU0sRUFBRTtBQUpFLEdBRlo7QUFTQSxRQUFNO0FBQUVOLElBQUFBO0FBQUYsTUFBVyxNQUFNWCxPQUFPLENBQUNHLEdBQUQsQ0FBUCxDQUNwQk0sR0FEb0IsQ0FDaEIsUUFEZ0IsRUFFcEJHLEdBRm9CLENBRWhCLFFBRmdCLEVBRU4sa0JBRk0sQ0FBdkI7QUFJQUwsRUFBQUEsTUFBTSxDQUFDSSxJQUFELENBQU4sQ0FBYUUsY0FBYixDQUE0QixNQUE1QixFQUFvQyxXQUFwQztBQUNBTixFQUFBQSxNQUFNLENBQUNJLElBQUQsQ0FBTixDQUFhRSxjQUFiLENBQTRCLFNBQTVCLEVBQXVDLGNBQXZDO0FBQ0FOLEVBQUFBLE1BQU0sQ0FBQ0ksSUFBRCxDQUFOLENBQWFFLGNBQWIsQ0FBNEIsUUFBNUIsRUFBc0MsYUFBdEM7QUFDQU4sRUFBQUEsTUFBTSxDQUFDSSxJQUFELENBQU4sQ0FBYUUsY0FBYixDQUE0QixRQUE1QixFQUFzQyxhQUF0QztBQUNELENBcEJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcbmNvbnN0IG5vY2sgPSByZXF1aXJlKCdub2NrJyk7XG5cbmNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uLy4uL3NlcnZlcicpO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgbm9jay5jbGVhbkFsbCgpO1xufSk7XG5cbnRlc3QoJ3Nob3VsZCByZXR1cm4gc3RhdHVzIGNvZGUgMjAwIHdpdGggZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gIGV4cGVjdC5hc3NlcnRpb25zKDEpO1xuXG4gIG5vY2soJ2h0dHA6Ly91aW5hbWVzLmNvbS9hcGknKVxuICAgIC5nZXQoJy8nKVxuICAgIC5yZXBseSg1MDApO1xuXG4gIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgLmdldCgnL3Byb3h5JylcbiAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnZXJyb3InKTtcbn0pO1xuXG4vLyB0ZXN0KCdzaG91bGQgcmV0dXJuIHN0YXR1cyBjb2RlIDIwMCcsIGFzeW5jICgpID0+IHtcbi8vICAgZXhwZWN0LmFzc2VydGlvbnMoNCk7XG4vL1xuLy8gICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuLy8gICAgIC5nZXQoJy9wcm94eScpXG4vLyAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbi8vXG4vLyAgIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnbmFtZScpO1xuLy8gICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ3N1cm5hbWUnKTtcbi8vICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdyZWdpb24nKTtcbi8vICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdnZW5kZXInKTtcbi8vIH0pO1xuXG50ZXN0KCdzaG91bGQgcmV0dXJuIHN0YXR1cyBleHBlY3RlZCByZXNwb25zZScsIGFzeW5jICgpID0+IHtcbiAgZXhwZWN0LmFzc2VydGlvbnMoNCk7XG5cbiAgbm9jaygnaHR0cDovL3VpbmFtZXMuY29tL2FwaScpXG4gIC5nZXQoJy8nKVxuICAucmVwbHkoMjAwLCB7XG4gICAgbmFtZTogJ3Rlc3QtbmFtZScsXG4gICAgc3VybmFtZTogJ3Rlc3Qtc3VybmFtZScsXG4gICAgcmVnaW9uOiAndGVzdC1yZWdpb24nLFxuICAgIGdlbmRlcjogJ3Rlc3QtZ2VuZGVyJ1xuICB9KTtcblxuICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgIC5nZXQoJy9wcm94eScpXG4gICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcblxuICBleHBlY3QoYm9keSkudG9IYXZlUHJvcGVydHkoJ25hbWUnLCAndGVzdC1uYW1lJyk7XG4gIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnc3VybmFtZScsICd0ZXN0LXN1cm5hbWUnKTtcbiAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdyZWdpb24nLCAndGVzdC1yZWdpb24nKTtcbiAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdnZW5kZXInLCAndGVzdC1nZW5kZXInKTtcbn0pO1xuIl19